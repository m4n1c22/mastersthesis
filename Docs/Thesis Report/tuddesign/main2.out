\BOOKMARK [0][]{chapter.1}{1 Background}{}% 1
\BOOKMARK [1][-]{section.1.1}{1.1 Software Verification}{chapter.1}% 2
\BOOKMARK [2][-]{subsection.1.1.1}{1.1.1 Automated Software Verification for Concurrent Programs}{section.1.1}% 3
\BOOKMARK [1][-]{section.1.2}{1.2 Model Checking}{chapter.1}% 4
\BOOKMARK [1][-]{section.1.3}{1.3 Symbolic Execution}{chapter.1}% 5
\BOOKMARK [1][-]{section.1.4}{1.4 Iterative Relaxed Scheduling}{chapter.1}% 6
\BOOKMARK [1][-]{section.1.5}{1.5 Deterministic Multi-Threading}{chapter.1}% 7
\BOOKMARK [0][]{chapter.2}{2 Related Work}{}% 8
\BOOKMARK [0][]{chapter.3}{3 Design Challenges}{}% 9
\BOOKMARK [1][-]{section.3.1}{3.1 Overview}{chapter.3}% 10
\BOOKMARK [1][-]{section.3.2}{3.2 Design Decisions and Challenges}{chapter.3}% 11
\BOOKMARK [2][-]{subsection.3.2.1}{3.2.1 Mapping UTID to RTID}{section.3.2}% 12
\BOOKMARK [2][-]{subsection.3.2.2}{3.2.2 Registration of UTID to scheduler}{section.3.2}% 13
\BOOKMARK [2][-]{subsection.3.2.3}{3.2.3 Data Structure for mapping UTID to task ID}{section.3.2}% 14
\BOOKMARK [2][-]{subsection.3.2.4}{3.2.4 Communication between user thread and kernel space scheduler during context switch}{section.3.2}% 15
\BOOKMARK [2][-]{subsection.3.2.5}{3.2.5 Mapping the trace object to kernel space}{section.3.2}% 16
\BOOKMARK [2][-]{subsection.3.2.6}{3.2.6 Trace verification inside user program vs kernel space scheduler}{section.3.2}% 17
\BOOKMARK [2][-]{subsection.3.2.7}{3.2.7 Yield to scheduler vs Pre-emptive scheduler}{section.3.2}% 18
\BOOKMARK [2][-]{subsection.3.2.8}{3.2.8 Vector clock design for finding the event in the trace}{section.3.2}% 19
\BOOKMARK [0][]{chapter.4}{4 Designs}{}% 20
\BOOKMARK [1][-]{section.4.1}{4.1 Design with no checking in user space}{chapter.4}% 21
\BOOKMARK [2][-]{subsection.4.1.1}{4.1.1 Design with no additional scheduler thread}{section.4.1}% 22
\BOOKMARK [2][-]{subsection.4.1.2}{4.1.2 Design with an additional scheduler thread}{section.4.1}% 23
\BOOKMARK [1][-]{section.4.2}{4.2 Design with checking in user space}{chapter.4}% 24
\BOOKMARK [2][-]{subsection.4.2.1}{4.2.1 Design with no additional scheduler thread}{section.4.2}% 25
\BOOKMARK [2][-]{subsection.4.2.2}{4.2.2 Design with an additional scheduler thread}{section.4.2}% 26
\BOOKMARK [1][-]{section.4.3}{4.3 Variant in blocking implementation}{chapter.4}% 27
\BOOKMARK [0][]{dummy.1}{Bibliography}{}% 28
